<?xml version="1.0"?>

<robot name="robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="length_wheel" value="0.05" />
  <xacro:property name="radius_wheel" value="0.06" />
  <xacro:property name="PI" value="3.1415926"/>
  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="0.01" ixy="0.0" ixz="0.0"
                    iyy="0.01" iyz="0.0" izz="0.01" />
    </inertial>
  </xacro:macro>

  <!-- base_link to livox_frame -->
  <xacro:arg name="xyz" default="0.12 0.0 0.175" />
  <xacro:arg name="rpy" default="0 0 0" />

  <link name="dummy"/>

  <link name="base_link">
    <visual>
      <geometry>
        <box size="0.2 .3 .1"/>
      </geometry>
      <origin rpy="0 0 ${PI/2}" xyz="0 0 0.05"/>
      <material name="white">
        <color rgba="1 1 1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.2 .3 0.1"/>
      </geometry>
      <origin rpy="0 0 ${PI/2}" xyz="0 0 0.05"/>
    </collision>
    <xacro:default_inertial mass="8.2"/>
  </link>

  <joint name="dummy_joint" type="fixed">
     <parent link="dummy"/>
     <child link="base_link"/>
  </joint>

  <link name="wheel_1">
    <visual>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
    </collision>
    <mu1>0.5</mu1>
    <mu2>0.5</mu2>
    <xacro:default_inertial mass="0.5"/>
  </link>

  <link name="wheel_2">
    <visual>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
    </collision>
    <mu1>0.5</mu1>
    <mu2>0.5</mu2>
    <xacro:default_inertial mass="0.5"/>
  </link>

  <link name="wheel_3">
    <visual>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
    </collision>
    <mu1>0.5</mu1>
    <mu2>0.5</mu2>
    <xacro:default_inertial mass="0.5"/>
  </link>

  <link name="wheel_4">
    <visual>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0" />
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="${length_wheel}" radius="${radius_wheel}"/>
      </geometry>
    </collision>
    <mu1>0.5</mu1>
    <mu2>0.5</mu2>
    <xacro:default_inertial mass="0.5"/>
  </link>

  <joint name="base_to_wheel1" type="continuous">
    <parent link="base_link"/>
    <child link="wheel_1"/>
    <origin rpy="${-PI/2} 0 0" xyz="0.1 0.13 0"/>
    <axis xyz="0 0 1" />
  </joint>

  <joint name="base_to_wheel2" type="continuous">
    <axis xyz="0 0 1" />
    <anchor xyz="0 0 0" />
    <limit effort="100" velocity="100" />
    <parent link="base_link"/>
    <child link="wheel_2"/>
    <origin rpy="${-PI/2} 0 0" xyz="-0.1 0.13 0"/>
  </joint>

  <joint name="base_to_wheel3" type="continuous">
    <parent link="base_link"/>
    <axis xyz="0 0 1" />
    <child link="wheel_3"/>
    <origin rpy="${-PI/2} 0 0" xyz="0.1 -0.13 0"/>
  </joint>

  <joint name="base_to_wheel4" type="continuous">
    <parent link="base_link"/>
    <axis xyz="0 0 1" />
    <child link="wheel_4"/>
    <origin rpy="${-PI/2} 0 0" xyz="-0.1 -0.13 0"/>
  </joint>

  <!-- IMU joint -->
  <joint name="imu_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0.12 0 0.125" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="imu_link"/>
  </joint>

  <!-- IMU -->
  <link name="imu_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="green">
        <color rgba="0 1 0 1"/>
      </material>
    </visual>
    <inertial>
      <mass value="1e-2" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <!-- Robot Plugins-->
  <!-- https://gazebosim.org/docs/fortress/moving_robot/ -->
  <gazebo>
    <plugin filename="libignition-gazebo-sensors-system.so"
            name="ignition::gazebo::systems::Sensors">
        <render_engine>ogre2</render_engine>
    </plugin>
    <plugin filename="libignition-gazebo-user-commands-system.so"
            name="ignition::gazebo::systems::UserCommands">
    </plugin>
    <!--shows the scene in the GUI-->
    <plugin filename="libignition-gazebo-scene-broadcaster-system.so"
            name="ignition::gazebo::systems::SceneBroadcaster"> 
    </plugin>

    <!-- DiffDrive plugin -->
    <!-- can be changed to libignition-gazebo-mecanum-drive-system.so for mecanum drive, there's even a wheel-slip plugin -->
    <plugin filename="libignition-gazebo-diff-drive-system.so"
            name="ignition::gazebo::systems::DiffDrive">
        <left_joint>base_to_wheel1</left_joint>
        <left_joint>base_to_wheel2</left_joint>
        <right_joint>base_to_wheel3</right_joint>
        <right_joint>base_to_wheel4</right_joint>
        <wheel_separation>1.2</wheel_separation>
        <wheel_radius>${radius_wheel}</wheel_radius>
        <odom_publish_frequency>1</odom_publish_frequency>
        <topic>cmd_vel</topic>
    </plugin>
    <!-- Moving Forward with Arrow Key Control plugin -->
    <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
        <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
            <match field="data">16777235</match>
        </input>
        <output type="ignition.msgs.Twist" topic="/cmd_vel">
            linear: {x: 0.5}, angular: {z: 0.0}
        </output>
    </plugin>
    <!-- Moving Backward with Arrow Key Control plugin -->
    <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
        <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
            <match field="data">16777237</match>
        </input>
        <output type="ignition.msgs.Twist" topic="/cmd_vel">
            linear: {x: -0.5}, angular: {z: 0.0}
        </output>
    </plugin>
    <!-- Turning Left with Arrow Key Control plugin -->
    <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
        <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
            <match field="data">16777234</match>
        </input>
        <output type="ignition.msgs.Twist" topic="/cmd_vel">
            linear: {x: 0.0}, angular: {z: 0.5}
        </output>
    </plugin>
    <!-- Turning Right with Arrow Key Control plugin -->
    <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
        <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
            <match field="data">16777236</match>
        </input>
        <output type="ignition.msgs.Twist" topic="/cmd_vel">
            linear: {x: 0.0}, angular: {z: -0.5}
        </output>
    </plugin>
    <!-- Stop with Key '1' Control plugin -->
    <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
        <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
            <match field="data">49</match>
        </input>
        <output type="ignition.msgs.Twist" topic="/cmd_vel">
            linear: {x: 0.0}, angular: {z: 0.0}
        </output>
    </plugin>
  </gazebo>

  <!-- link plugins -->
  <!-- there's also an odometry-publish-system plugin for publishing odom topic -->

  <!-- mid360_imu sensor and its plugin -->
  <!-- topic name in ign topic -l: /world/default/model/testbot/link/dummy/sensor/mid360_imu/imu -->
  <gazebo reference="imu_link">
    <sensor name="mid360_imu" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <plugin name="ignition::gazebo::systems::Imu" filename="libignition-gazebo-imu-system.so">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=/livox/imu</remapping>
        </ros>
        <frame_name>imu_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- LiDAR sensor -->
  <!-- https://gazebosim.org/docs/fortress/sensors/#lidar-sensor -->
  <!-- topic name in ign topic -l: /world/default/model/testbot/link/dummy/sensor/lidar_sensor/scan -->
  <gazebo reference="base_link">
    <sensor type="gpu_ray" name="lidar_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-1.5708</min_angle>
            <max_angle>1.5708</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.2</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
    </sensor>
  </gazebo>
  <!-- Livox-Mid360  -->
  <!--<xacro:include filename="$(find ros2_livox_simulation)/urdf/mid360.xacro" />
  <xacro:mid360 name="livox_frame" parent="base_link" topic="/livox/lidar">
    <origin xyz="$(arg xyz)" rpy="$(arg rpy)" />
  </xacro:mid360> -->

</robot>